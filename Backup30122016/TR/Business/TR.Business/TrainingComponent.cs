//====================================================================================================
// Base code generated with Motion: BC Gen (Build 3.0.5701.25371)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by es.cheah at ENGSOON on 11/10/2016 14:44:28 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using TR.Entities;
using TR.Data;
using MK.Framework.ACE;
using MK.Framework.ACE.Entities;
using MK.Framework.SNE;
using MK.Framework.AE;
using MK.Framework.AE.Entities;
using MK.Framework.DXE;
using MK.Framework.DXE.Enumeration;

namespace TR.Business
{
    /// <summary>
    /// Training business component.
    /// </summary>
    public partial class TrainingComponent
    {
        /// <summary>
        /// Login business method. 
        /// </summary>
        /// <param name="userID">A userID value.</param>
        /// <param name="userName">A userName value.</param>
        /// <param name="password">A password value.</param>
        /// <returns>Returns a Users object.</returns>
        //public Users Login(long userID, string userName, string password)
        //{
        //    Users result = default(Users);

        //    // Data access component declarations.
        //    var usersDAC = new UsersDAC();

        //    // Step 1 - Calling SelectById on UsersDAC.
        //    result = usersDAC.SelectById(userID, userName, password);
        //    return result;

        //}

        /// <summary>
        /// Apply business method. 
        /// </summary>
        /// <param name="trainingRequest">A trainingRequest value.</param>
        /// <returns>Returns a TrainingRequest object.</returns>
        public TrainingRequest Apply(TrainingRequest trainingRequest)
        {
            TrainingRequest result = default(TrainingRequest);

            // Data access component declarations.
            var trainingRequestDAC = new TrainingRequestDAC();

            Sequencer sequencer = Sequencer.Create();

            trainingRequest.TRequestID = "TR" + sequencer.Next();

            // Step 1 - Calling Create on TrainingRequestDAC.
            result = trainingRequestDAC.Create(trainingRequest);


            return result;



        }

        /// <summary>
        /// Approve business method. 
        /// </summary>
        /// <param name="trainingRequest">A trainingRequest value.</param>
        public void Approve(TrainingRequest trainingRequest)
        {   
            // Data access component declarations.
            var trainingRequestDAC = new TrainingRequestDAC();
            // trainingRequestDAC.SelectById(trainingRequest.TRequestID);

            TrainingRequest oldRequest = trainingRequestDAC.SelectById(trainingRequest.TRequestID);


            // Step 1 - Calling UpdateById on TrainingRequestDAC.
            trainingRequestDAC.UpdateById(trainingRequest);
            
            var auditLog = new AuditLog();
          
            auditLog.Module = "Approve Training";
            auditLog.Action = "Approve  Training";
            auditLog.Description = "Approve Training";
            auditLog.CreateBy = Environment.MachineName;

            var auditor = new Auditor();
            auditor.AuditModified(auditLog, trainingRequest.RequestStatus, trainingRequest.RequestStatus);
           // auditor.AuditModified(auditLog, trainingRequest);
            //auditor.AuditAdded(auditLog, trainingRequest);
        }

        /// <summary>
        /// Cancel business method. 
        /// </summary>
        /// <param name="trainingRequest">A trainingRequest value.</param>
        public void Cancel(TrainingRequest trainingRequest)
        {
            // Data access component declarations.
            var trainingRequestDAC = new TrainingRequestDAC();


            TrainingRequest oldRequest = trainingRequestDAC.SelectById(trainingRequest.TRequestID);

            // Step 1 - Calling UpdateById on TrainingRequestDAC.
            trainingRequestDAC.UpdateById(trainingRequest);

            var auditLog = new AuditLog();
            auditLog.Module = "Cancel Training";
            auditLog.Action = "Cancel Training";
            auditLog.Description = "Cancel Training";
            auditLog.CreateBy = Environment.MachineName;

            var auditor = new Auditor();
            auditor.AuditModified(auditLog, oldRequest, trainingRequest);
        }

        /// <summary>
        /// ListTraining business method. 
        /// </summary>
        /// <param name="currentPage">A currentPage value.</param>
        /// <param name="tRequestID">A tRequestID value.</param>
        public List<TrainingRequest> ListTraining(int currentPage)
        {
            List<TrainingRequest> listOfTrainingRequest = new List<TrainingRequest>();
            // Data access component declarations.
            var trainingRequestDAC = new TrainingRequestDAC();

            // Step 1 - Calling SelectPage on TrainingRequestDAC.
            listOfTrainingRequest = trainingRequestDAC.SelectPage(currentPage);

            return listOfTrainingRequest;
        }

        /// <summary>
        /// GetTraining business method. 
        /// </summary>
        /// <param name="tRequestID">A tRequestID value.</param>
        /// <returns>Returns a TrainingRequest object.</returns>
        public TrainingRequest GetTraining(string tRequestID)
        {
            TrainingRequest result = default(TrainingRequest);

            // Data access component declarations.
            var trainingRequestDAC = new TrainingRequestDAC();

            // Step 1 - Calling SelectById on TrainingRequestDAC.
            result = trainingRequestDAC.SelectById(tRequestID);
            return result;

        }

        public User LoginVerify(string Username, string Password)
        {
            User useraccess;

            var ace = new AccessControl();
            useraccess = ace.Authenticate("TR", Username, Password);
            
            return useraccess;


         
        }

        public void Export()
        {
            PackageCreator packageCreator = new PackageCreator();
            packageCreator.ExecuteMode = ExecuteMode.FileSystem;
            packageCreator.StagingFolder = @"C:\Temp\Drop\Staging";
            packageCreator.AutoGeneratePassword = true;

            // Generates a dtsx file and return password. 
            string password = packageCreator.CreateExportToFlatFilePackage(
               "MyExcelDtsxPackage", "SELECT [TRequestID], [CorrelationID], [UserName], [StartDate], [EndDate], [RequestStatus], [SubmitDate],[TrainingName] FROM dbo.TrainingRequest", @"Data Source=ENGSOON;Initial Catalog=HRTrainingRequest;User ID=sa;Password=CESoon1012", "MyGeneratedExcelFile", ".csv", "|", true, true);
        }

        /// <summary>
        /// Reject business method. 
        /// </summary>
        /// <param name="trainingRequest">A trainingRequest value.</param>
        public void Reject(TrainingRequest trainingRequest)
        {
            // Data access component declarations.
            var trainingRequestDAC = new TrainingRequestDAC();
            TrainingRequest oldRequest = trainingRequestDAC.SelectById(trainingRequest.TRequestID);
            // Step 1 - Calling UpdateById on TrainingRequestDAC.
            trainingRequestDAC.UpdateById(trainingRequest);

            var auditLog = new AuditLog();
            auditLog.Module = "Reject Training";
            auditLog.Action = "Reject Training";
            auditLog.Description = "Reject Training";
            auditLog.CreateBy = Environment.MachineName;

            var auditor = new Auditor();
            auditor.AuditModified(auditLog, oldRequest, trainingRequest);
        }

        /// <summary>
        /// Delay business method. 
        /// </summary>
        /// <param name="trainingRequest">A trainingRequest value.</param>
        public void Delay(TrainingRequest trainingRequest)
        {
            // Data access component declarations.
            var trainingRequestDAC = new TrainingRequestDAC();

            trainingRequest.RequestStatus = "Unattended";
            // Step 1 - Calling UpdateById on TrainingRequestDAC.
            trainingRequestDAC.UpdateById(trainingRequest);

            
        }

        public AccessPolicy GetUserPermission(long userID,string policyId)
        { 
            var ace = new AccessControl();
            var ap = ace.GetAccessPolicy(userID, policyId);

            return ap;
        }
    }
}
