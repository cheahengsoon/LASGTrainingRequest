//====================================================================================================
// Base code generated with Momentum: DAC Gen (Build 3.0.5701.25371)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by es.cheah at ENGSOON on 11/10/2016 14:12:51 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.Common;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;
using TR.Entities;

namespace TR.Data
{
    /// <summary>
    /// TrainingRequest data access component. Manages CRUD operations for the TrainingRequest table.
    /// </summary>
    public partial class TrainingRequestDAC : DataAccessComponent
    {
        /// <summary>
        /// Inserts a new row in the TrainingRequest table.
        /// </summary>
        /// <param name="trainingRequest">A TrainingRequest object.</param>
        /// <returns>An updated TrainingRequest object.</returns>
        public TrainingRequest Create(TrainingRequest trainingRequest)
        {
            const string SQL_STATEMENT =
                "INSERT INTO dbo.TrainingRequest ([TRequestID], [CorrelationID], [UserName], [StartDate], [EndDate], [RequestStatus], [SubmitDate], [TrainingName]) " +
                "VALUES(@TRequestID, @CorrelationID, @UserName, @StartDate, @EndDate, @RequestStatus, @SubmitDate, @TrainingName);  ";

            // Connect to database.
            var db = new SqlDatabase(base.ConnectionString);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@TRequestID", DbType.String, trainingRequest.TRequestID);
                db.AddInParameter(cmd, "@CorrelationID", DbType.Guid, trainingRequest.CorrelationID);
                db.AddInParameter(cmd, "@UserName", DbType.String, trainingRequest.UserName);
                db.AddInParameter(cmd, "@StartDate", DbType.Date, trainingRequest.StartDate);
                db.AddInParameter(cmd, "@EndDate", DbType.Date, trainingRequest.EndDate);
                db.AddInParameter(cmd, "@RequestStatus", DbType.String, trainingRequest.RequestStatus);
                db.AddInParameter(cmd, "@SubmitDate", DbType.Date, trainingRequest.SubmitDate);
                db.AddInParameter(cmd, "@TrainingName", DbType.AnsiString, trainingRequest.TrainingName);

                db.ExecuteNonQuery(cmd);
            }

            return trainingRequest;
        }

        /// <summary>
        /// Updates an existing row in the TrainingRequest table.
        /// </summary>
        /// <param name="trainingRequest">A TrainingRequest entity object.</param>
        public void UpdateById(TrainingRequest trainingRequest)
        {
            const string SQL_STATEMENT =
                "UPDATE dbo.TrainingRequest " +
                "SET " +
                    "[RequestStatus]=@RequestStatus " +
                "WHERE [TRequestID]=@TRequestID ";

            // Connect to database.
            var db = new SqlDatabase(base.ConnectionString);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Set parameter values.
                db.AddInParameter(cmd, "@TRequestID", DbType.String, trainingRequest.TRequestID);
                db.AddInParameter(cmd, "@RequestStatus", DbType.String, trainingRequest.RequestStatus);

                db.ExecuteNonQuery(cmd);
            }
        }

        /// <summary>
        /// Returns a row from the TrainingRequest table.
        /// </summary>
        /// <param name="tRequestID">A TRequestID value.</param>
        /// <returns>A TrainingRequest object with data populated from the database.</returns>
        public TrainingRequest SelectById(string tRequestID)
        {
            const string SQL_STATEMENT =
                "SELECT [TRequestID], [CorrelationID], [UserName], [StartDate], [EndDate], [RequestStatus]" +
                        ", [SubmitDate] " +
                "FROM dbo.TrainingRequest  " +
                "WHERE [TRequestID]=@TRequestID ";

            TrainingRequest trainingRequest = null;

            // Connect to database.
            var db = new SqlDatabase(base.ConnectionString);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                db.AddInParameter(cmd, "@TRequestID", DbType.String, tRequestID);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    if (dr.Read())
                    {
                        // Create a new TrainingRequest
                        trainingRequest = new TrainingRequest();

                        // Read values.
                        trainingRequest.TRequestID = GetDataValue<string>(dr, "TRequestID");
                        trainingRequest.CorrelationID = GetDataValue<Guid>(dr, "CorrelationID");
                        trainingRequest.UserName = GetDataValue<string>(dr, "UserName");
                        trainingRequest.StartDate = GetDataValue<DateTime>(dr, "StartDate");
                        trainingRequest.EndDate = GetDataValue<DateTime>(dr, "EndDate");
                        trainingRequest.RequestStatus = GetDataValue<string>(dr, "RequestStatus");
                        trainingRequest.SubmitDate = GetDataValue<DateTime>(dr, "SubmitDate");
                     // trainingRequest.TrainingName = GetDataValue<string>(dr, "TrainingName");
                    }
                }
            }

            return trainingRequest;
        }

        /// <summary>
        /// Conditionally retrieves one or more rows from the TrainingRequest table with paging.
        /// </summary>
        /// <param name="currentPage">The currentPage value.</param>
        /// <returns>A collection of TrainingRequest objects.</returns>		
        public List<TrainingRequest> SelectPage(int currentPage)
        {
            const string SQL_STATEMENT =
                "WITH SortedTrainingRequest AS " +
                "(SELECT ROW_NUMBER() OVER (ORDER BY [SubmitDate] DESC) AS RowNumber, " +
                    "[TRequestID], [CorrelationID], [UserName], [StartDate], [EndDate], [RequestStatus]" +
                        ", [SubmitDate], [TrainingName] " +
                    "FROM dbo.TrainingRequest " +
                ") SELECT * FROM SortedTrainingRequest " +
                "WHERE RowNumber BETWEEN @StartIndex AND @EndIndex";

            // PageSize is retrieved from config file via the base class.
            long startIndex = (currentPage * base.PageSize);
            long endIndex = startIndex + base.PageSize;

            startIndex += 1;
            List<TrainingRequest> result = new List<TrainingRequest>();

            // Connect to database.
            var db = new SqlDatabase(base.ConnectionString);
            using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))
            {
                // Paging parameters.
                db.AddInParameter(cmd, "@StartIndex", DbType.Int64, startIndex);
                db.AddInParameter(cmd, "@EndIndex", DbType.Int64, endIndex);

                using (IDataReader dr = db.ExecuteReader(cmd))
                {
                    while (dr.Read())
                    {
                        // Create a new TrainingRequest
                        TrainingRequest trainingRequest = new TrainingRequest();

                        // Read values.
                        trainingRequest.TRequestID = GetDataValue<string>(dr, "TRequestID");
                        trainingRequest.CorrelationID = GetDataValue<Guid>(dr, "CorrelationID");
                        trainingRequest.UserName = GetDataValue<string>(dr, "UserName");
                        trainingRequest.StartDate = GetDataValue<DateTime>(dr, "StartDate");
                        trainingRequest.EndDate = GetDataValue<DateTime>(dr, "EndDate");
                        trainingRequest.RequestStatus = GetDataValue<string>(dr, "RequestStatus");
                        trainingRequest.SubmitDate = GetDataValue<DateTime>(dr, "SubmitDate");
                        trainingRequest.TrainingName = GetDataValue<string>(dr, "TrainingName");

                        // Add to List.
                        result.Add(trainingRequest);
                    }
                }
            }

            return result;
        }
    }
}

