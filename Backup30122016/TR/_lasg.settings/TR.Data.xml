<?xml version="1.0" encoding="utf-8"?>
<ArrayOfClassModel xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <ClassModel ClassName="TrainingRequestDAC" IsUpdated="false" GenerateXmlComments="true" UseDefaultComments="true" XmlComment="TrainingRequest data access component. Manages CRUD operations for the TrainingRequest table." ProductName="TR.Data" Body="&#xD;&#xA;  /// &lt;summary&gt;&#xD;&#xA;  /// Inserts a new row in the TrainingRequest table.&#xD;&#xA;  /// &lt;/summary&gt;&#xD;&#xA;  /// &lt;param name=&quot;trainingRequest&quot;&gt;A TrainingRequest object.&lt;/param&gt;&#xD;&#xA;  /// &lt;returns&gt;An updated TrainingRequest object.&lt;/returns&gt;&#xD;&#xA;  public TrainingRequest Create(TrainingRequest trainingRequest)&#xD;&#xA;  {&#xD;&#xA;   const string SQL_STATEMENT = &#xD;&#xA;    &quot;INSERT INTO dbo.TrainingRequest ([TRequestID], [CorrelationID], [UserName], [StartDate], [EndDate], [RequestStatus], [SubmitDate], [TrainingName]) &quot; +&#xD;&#xA;    &quot;VALUES(@TRequestID, @CorrelationID, @UserName, @StartDate, @EndDate, @RequestStatus, @SubmitDate, @TrainingName);  &quot; ; &#xD;&#xA;&#xD;&#xA;   // Connect to database.&#xD;&#xA;   var db = new SqlDatabase(base.ConnectionString);&#xD;&#xA;   using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))&#xD;&#xA;   {&#xD;&#xA;    // Set parameter values.&#xD;&#xA;    db.AddInParameter(cmd, &quot;@TRequestID&quot;, DbType.String, trainingRequest.TRequestID);&#xD;&#xA;    db.AddInParameter(cmd, &quot;@CorrelationID&quot;, DbType.Guid, trainingRequest.CorrelationID);&#xD;&#xA;    db.AddInParameter(cmd, &quot;@UserName&quot;, DbType.String, trainingRequest.UserName);&#xD;&#xA;    db.AddInParameter(cmd, &quot;@StartDate&quot;, DbType.Date, trainingRequest.StartDate);&#xD;&#xA;    db.AddInParameter(cmd, &quot;@EndDate&quot;, DbType.Date, trainingRequest.EndDate);&#xD;&#xA;    db.AddInParameter(cmd, &quot;@RequestStatus&quot;, DbType.String, trainingRequest.RequestStatus);&#xD;&#xA;    db.AddInParameter(cmd, &quot;@SubmitDate&quot;, DbType.Date, trainingRequest.SubmitDate);&#xD;&#xA;    db.AddInParameter(cmd, &quot;@TrainingName&quot;, DbType.AnsiString, trainingRequest.TrainingName);&#xD;&#xA;&#xD;&#xA;    db.ExecuteNonQuery(cmd);&#xD;&#xA;   }&#xD;&#xA;&#xD;&#xA;   return trainingRequest;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  /// &lt;summary&gt;&#xD;&#xA;  /// Updates an existing row in the TrainingRequest table.&#xD;&#xA;  /// &lt;/summary&gt;&#xD;&#xA;  /// &lt;param name=&quot;trainingRequest&quot;&gt;A TrainingRequest entity object.&lt;/param&gt;&#xD;&#xA;  public void UpdateById(TrainingRequest trainingRequest)&#xD;&#xA;  {&#xD;&#xA;   const string SQL_STATEMENT = &#xD;&#xA;    &quot;UPDATE dbo.TrainingRequest &quot; +&#xD;&#xA;    &quot;SET &quot; +&#xD;&#xA;     &quot;[CorrelationID]=@CorrelationID, &quot; +&#xD;&#xA;     &quot;[UserName]=@UserName, &quot; +&#xD;&#xA;     &quot;[StartDate]=@StartDate, &quot; +&#xD;&#xA;     &quot;[EndDate]=@EndDate, &quot; +&#xD;&#xA;     &quot;[RequestStatus]=@RequestStatus, &quot; +&#xD;&#xA;     &quot;[SubmitDate]=@SubmitDate, &quot; +&#xD;&#xA;     &quot;[TrainingName]=@TrainingName &quot; +&#xD;&#xA;    &quot;WHERE [TRequestID]=@TRequestID &quot;;&#xD;&#xA;&#xD;&#xA;   // Connect to database.&#xD;&#xA;   var db = new SqlDatabase(base.ConnectionString);&#xD;&#xA;   using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))&#xD;&#xA;   {&#xD;&#xA;    // Set parameter values.&#xD;&#xA;    db.AddInParameter(cmd, &quot;@CorrelationID&quot;, DbType.Guid, trainingRequest.CorrelationID);&#xD;&#xA;    db.AddInParameter(cmd, &quot;@UserName&quot;, DbType.String, trainingRequest.UserName);&#xD;&#xA;    db.AddInParameter(cmd, &quot;@StartDate&quot;, DbType.Date, trainingRequest.StartDate);&#xD;&#xA;    db.AddInParameter(cmd, &quot;@EndDate&quot;, DbType.Date, trainingRequest.EndDate);&#xD;&#xA;    db.AddInParameter(cmd, &quot;@RequestStatus&quot;, DbType.String, trainingRequest.RequestStatus);&#xD;&#xA;    db.AddInParameter(cmd, &quot;@SubmitDate&quot;, DbType.Date, trainingRequest.SubmitDate);&#xD;&#xA;    db.AddInParameter(cmd, &quot;@TrainingName&quot;, DbType.AnsiString, trainingRequest.TrainingName);&#xD;&#xA;    db.AddInParameter(cmd, &quot;@TRequestID&quot;, DbType.String, trainingRequest.TRequestID);&#xD;&#xA;&#xD;&#xA;    db.ExecuteNonQuery(cmd);&#xD;&#xA;   }&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  /// &lt;summary&gt;&#xD;&#xA;  /// Returns a row from the TrainingRequest table.&#xD;&#xA;  /// &lt;/summary&gt;&#xD;&#xA;  /// &lt;param name=&quot;tRequestID&quot;&gt;A TRequestID value.&lt;/param&gt;&#xD;&#xA;  /// &lt;returns&gt;A TrainingRequest object with data populated from the database.&lt;/returns&gt;&#xD;&#xA;  public TrainingRequest SelectById(string tRequestID)&#xD;&#xA;  {&#xD;&#xA;   const string SQL_STATEMENT = &#xD;&#xA;    &quot;SELECT [TRequestID], [CorrelationID], [UserName], [StartDate], [EndDate], [RequestStatus]&quot;+&#xD;&#xA;      &quot;, [SubmitDate], [TrainingName] &quot; +&#xD;&#xA;    &quot;FROM dbo.TrainingRequest  &quot;  +&#xD;&#xA;    &quot;WHERE [TRequestID]=@TRequestID &quot;;&#xD;&#xA;&#xD;&#xA;   TrainingRequest trainingRequest = null;&#xD;&#xA;&#xD;&#xA;   // Connect to database.&#xD;&#xA;   var db = new SqlDatabase(base.ConnectionString);&#xD;&#xA;   using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))&#xD;&#xA;   {&#xD;&#xA;    db.AddInParameter(cmd, &quot;@TRequestID&quot;, DbType.String, tRequestID);&#xD;&#xA;&#xD;&#xA;    using (IDataReader dr = db.ExecuteReader(cmd))&#xD;&#xA;    {&#xD;&#xA;     if (dr.Read())&#xD;&#xA;     {&#xD;&#xA;      // Create a new TrainingRequest&#xD;&#xA;      trainingRequest = new TrainingRequest();&#xD;&#xA;&#xD;&#xA;      // Read values.&#xD;&#xA;      trainingRequest.TRequestID = GetDataValue&lt;string&gt;(dr, &quot;TRequestID&quot;);&#xD;&#xA;      trainingRequest.CorrelationID = GetDataValue&lt;Guid&gt;(dr, &quot;CorrelationID&quot;);&#xD;&#xA;      trainingRequest.UserName = GetDataValue&lt;string&gt;(dr, &quot;UserName&quot;);&#xD;&#xA;      trainingRequest.StartDate = GetDataValue&lt;DateTime&gt;(dr, &quot;StartDate&quot;);&#xD;&#xA;      trainingRequest.EndDate = GetDataValue&lt;DateTime&gt;(dr, &quot;EndDate&quot;);&#xD;&#xA;      trainingRequest.RequestStatus = GetDataValue&lt;string&gt;(dr, &quot;RequestStatus&quot;);&#xD;&#xA;      trainingRequest.SubmitDate = GetDataValue&lt;DateTime&gt;(dr, &quot;SubmitDate&quot;);&#xD;&#xA;      trainingRequest.TrainingName = GetDataValue&lt;string&gt;(dr, &quot;TrainingName&quot;);&#xD;&#xA;     }&#xD;&#xA;    }&#xD;&#xA;   }&#xD;&#xA;&#xD;&#xA;   return trainingRequest;&#xD;&#xA;  }&#xD;&#xA;&#xD;&#xA;  /// &lt;summary&gt;&#xD;&#xA;  /// Conditionally retrieves one or more rows from the TrainingRequest table with paging.&#xD;&#xA;  /// &lt;/summary&gt;&#xD;&#xA;  /// &lt;param name=&quot;currentPage&quot;&gt;The currentPage value.&lt;/param&gt;&#xD;&#xA;  /// &lt;returns&gt;A collection of TrainingRequest objects.&lt;/returns&gt;  &#xD;&#xA;  public List&lt;TrainingRequest&gt; SelectPage(int currentPage)&#xD;&#xA;  {&#xD;&#xA;   const string SQL_STATEMENT = &#xD;&#xA;    &quot;WITH SortedTrainingRequest AS &quot; +&#xD;&#xA;    &quot;(SELECT ROW_NUMBER() OVER (ORDER BY [SubmitDate] DESC) AS RowNumber, &quot; +&#xD;&#xA;     &quot;[TRequestID], [CorrelationID], [UserName], [StartDate], [EndDate], [RequestStatus]&quot;+&#xD;&#xA;      &quot;, [SubmitDate], [TrainingName] &quot; + &#xD;&#xA;     &quot;FROM dbo.TrainingRequest &quot; +&#xD;&#xA;    &quot;) SELECT * FROM SortedTrainingRequest &quot; +&#xD;&#xA;    &quot;WHERE RowNumber BETWEEN @StartIndex AND @EndIndex&quot;;&#xD;&#xA;&#xD;&#xA;   // PageSize is retrieved from config file via the base class.&#xD;&#xA;            long startIndex = (currentPage * base.PageSize);&#xD;&#xA;            long endIndex = startIndex + base.PageSize;&#xD;&#xA;&#xD;&#xA;            startIndex += 1;&#xD;&#xA;   List&lt;TrainingRequest&gt; result = new List&lt;TrainingRequest&gt;();&#xD;&#xA;&#xD;&#xA;   // Connect to database.&#xD;&#xA;   var db = new SqlDatabase(base.ConnectionString);&#xD;&#xA;   using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))&#xD;&#xA;   { &#xD;&#xA;    // Paging parameters.&#xD;&#xA;    db.AddInParameter(cmd, &quot;@StartIndex&quot;, DbType.Int64, startIndex);&#xD;&#xA;    db.AddInParameter(cmd, &quot;@EndIndex&quot;, DbType.Int64, endIndex);&#xD;&#xA;  &#xD;&#xA;    using (IDataReader dr = db.ExecuteReader(cmd))&#xD;&#xA;    {&#xD;&#xA;     while (dr.Read())&#xD;&#xA;     {&#xD;&#xA;      // Create a new TrainingRequest&#xD;&#xA;      TrainingRequest trainingRequest = new TrainingRequest();&#xD;&#xA;&#xD;&#xA;      // Read values.&#xD;&#xA;      trainingRequest.TRequestID = GetDataValue&lt;string&gt;(dr, &quot;TRequestID&quot;);&#xD;&#xA;      trainingRequest.CorrelationID = GetDataValue&lt;Guid&gt;(dr, &quot;CorrelationID&quot;);&#xD;&#xA;      trainingRequest.UserName = GetDataValue&lt;string&gt;(dr, &quot;UserName&quot;);&#xD;&#xA;      trainingRequest.StartDate = GetDataValue&lt;DateTime&gt;(dr, &quot;StartDate&quot;);&#xD;&#xA;      trainingRequest.EndDate = GetDataValue&lt;DateTime&gt;(dr, &quot;EndDate&quot;);&#xD;&#xA;      trainingRequest.RequestStatus = GetDataValue&lt;string&gt;(dr, &quot;RequestStatus&quot;);&#xD;&#xA;      trainingRequest.SubmitDate = GetDataValue&lt;DateTime&gt;(dr, &quot;SubmitDate&quot;);&#xD;&#xA;      trainingRequest.TrainingName = GetDataValue&lt;string&gt;(dr, &quot;TrainingName&quot;);&#xD;&#xA;&#xD;&#xA;      // Add to List.&#xD;&#xA;      result.Add(trainingRequest);&#xD;&#xA;     }&#xD;&#xA;    }&#xD;&#xA;   }&#xD;&#xA;&#xD;&#xA;   return result;&#xD;&#xA;  }&#xD;&#xA;">
    <NamespacesToImport />
    <Methods>
      <MethodModel Name="Create" EntityName="TrainingRequest" TableName="TrainingRequest" SchemaName="dbo" TableAlias="A" Type="Insert" IsUpdated="false" XmlComment="Inserts a new row in the TrainingRequest table." GenerateXmlComments="true" UseDefaultComments="true" UseLoadMethod="false" GenerateLoadMethod="false">
        <RelatedTables />
        <Columns>
          <ColumnModel Name="TRequestID" TableName="TrainingRequest" PropertyName="TRequestID" DataType="string" DbType="String" IsPrimaryKey="true" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="CorrelationID" TableName="TrainingRequest" PropertyName="CorrelationID" DataType="Guid" DbType="Guid" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="UserName" TableName="TrainingRequest" PropertyName="UserName" DataType="string" DbType="String" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="StartDate" TableName="TrainingRequest" PropertyName="StartDate" DataType="DateTime" DbType="Date" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="EndDate" TableName="TrainingRequest" PropertyName="EndDate" DataType="DateTime" DbType="Date" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="RequestStatus" TableName="TrainingRequest" PropertyName="RequestStatus" DataType="string" DbType="String" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="SubmitDate" TableName="TrainingRequest" PropertyName="SubmitDate" DataType="DateTime" DbType="Date" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="TrainingName" TableName="TrainingRequest" PropertyName="TrainingName" DataType="string" DbType="AnsiString" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
        </Columns>
        <FilterColumns />
        <OrderByColumns />
      </MethodModel>
      <MethodModel Name="UpdateById" EntityName="TrainingRequest" TableName="TrainingRequest" SchemaName="dbo" TableAlias="A" Type="UpdateObject" IsUpdated="false" XmlComment="Updates an existing row in the TrainingRequest table." GenerateXmlComments="true" UseDefaultComments="true" UseLoadMethod="false" GenerateLoadMethod="false">
        <RelatedTables />
        <Columns>
          <ColumnModel Name="TRequestID" TableName="TrainingRequest" PropertyName="TRequestID" DataType="string" DbType="String" IsPrimaryKey="true" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="CorrelationID" TableName="TrainingRequest" PropertyName="CorrelationID" DataType="Guid" DbType="Guid" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="UserName" TableName="TrainingRequest" PropertyName="UserName" DataType="string" DbType="String" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="StartDate" TableName="TrainingRequest" PropertyName="StartDate" DataType="DateTime" DbType="Date" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="EndDate" TableName="TrainingRequest" PropertyName="EndDate" DataType="DateTime" DbType="Date" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="RequestStatus" TableName="TrainingRequest" PropertyName="RequestStatus" DataType="string" DbType="String" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="SubmitDate" TableName="TrainingRequest" PropertyName="SubmitDate" DataType="DateTime" DbType="Date" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="TrainingName" TableName="TrainingRequest" PropertyName="TrainingName" DataType="string" DbType="AnsiString" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
        </Columns>
        <FilterColumns>
          <FilterColumnModel Name="TRequestID" TableName="TrainingRequest" PropertyName="TRequestID" DataType="string" DbType="String" IsPrimaryKey="true" IsIdentity="false" IsNullable="false" IsOutput="false" OpenParenthesis="false" ConditionalOperator="None" Operator="Equals" CloseParenthesis="false" IsOptional="false" />
        </FilterColumns>
        <OrderByColumns />
      </MethodModel>
      <MethodModel Name="SelectById" EntityName="TrainingRequest" TableName="TrainingRequest" SchemaName="dbo" TableAlias="A" Type="SelectObject" IsUpdated="false" XmlComment="Returns a row from the TrainingRequest table." GenerateXmlComments="true" UseDefaultComments="true" UseLoadMethod="false" GenerateLoadMethod="false">
        <RelatedTables />
        <Columns>
          <ColumnModel Name="TRequestID" TableName="TrainingRequest" PropertyName="TRequestID" DataType="string" DbType="String" IsPrimaryKey="true" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="CorrelationID" TableName="TrainingRequest" PropertyName="CorrelationID" DataType="Guid" DbType="Guid" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="UserName" TableName="TrainingRequest" PropertyName="UserName" DataType="string" DbType="String" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="StartDate" TableName="TrainingRequest" PropertyName="StartDate" DataType="DateTime" DbType="Date" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="EndDate" TableName="TrainingRequest" PropertyName="EndDate" DataType="DateTime" DbType="Date" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="RequestStatus" TableName="TrainingRequest" PropertyName="RequestStatus" DataType="string" DbType="String" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="SubmitDate" TableName="TrainingRequest" PropertyName="SubmitDate" DataType="DateTime" DbType="Date" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="TrainingName" TableName="TrainingRequest" PropertyName="TrainingName" DataType="string" DbType="AnsiString" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
        </Columns>
        <FilterColumns>
          <FilterColumnModel Name="TRequestID" TableName="TrainingRequest" PropertyName="TRequestID" DataType="string" DbType="String" IsPrimaryKey="true" IsIdentity="false" IsNullable="false" IsOutput="false" OpenParenthesis="false" ConditionalOperator="None" Operator="Equals" CloseParenthesis="false" IsOptional="false" />
        </FilterColumns>
        <OrderByColumns />
      </MethodModel>
      <MethodModel Name="SelectPage" EntityName="TrainingRequest" TableName="TrainingRequest" SchemaName="dbo" TableAlias="A" Type="SelectPage" IsUpdated="false" XmlComment="Conditionally retrieves one or more rows from the TrainingRequest table with paging." GenerateXmlComments="true" UseDefaultComments="true" UseLoadMethod="false" GenerateLoadMethod="false">
        <RelatedTables />
        <Columns>
          <ColumnModel Name="TRequestID" TableName="TrainingRequest" PropertyName="TRequestID" DataType="string" DbType="String" IsPrimaryKey="true" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="CorrelationID" TableName="TrainingRequest" PropertyName="CorrelationID" DataType="Guid" DbType="Guid" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="UserName" TableName="TrainingRequest" PropertyName="UserName" DataType="string" DbType="String" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="StartDate" TableName="TrainingRequest" PropertyName="StartDate" DataType="DateTime" DbType="Date" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="EndDate" TableName="TrainingRequest" PropertyName="EndDate" DataType="DateTime" DbType="Date" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="RequestStatus" TableName="TrainingRequest" PropertyName="RequestStatus" DataType="string" DbType="String" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="SubmitDate" TableName="TrainingRequest" PropertyName="SubmitDate" DataType="DateTime" DbType="Date" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="TrainingName" TableName="TrainingRequest" PropertyName="TrainingName" DataType="string" DbType="AnsiString" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
        </Columns>
        <FilterColumns />
        <OrderByColumns>
          <OrderColumnModel Name="SubmitDate" TableName="TrainingRequest" PropertyName="SubmitDate" DataType="DateTime" DbType="Date" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" OrderDirection="Descending" />
        </OrderByColumns>
      </MethodModel>
    </Methods>
  </ClassModel>
  <ClassModel ClassName="UserLogDAC" IsUpdated="false" GenerateXmlComments="true" UseDefaultComments="true" XmlComment="UserLog data access component. Manages CRUD operations for the UserLog table." ProductName="TR.Data" Body="&#xD;&#xA;  /// &lt;summary&gt;&#xD;&#xA;  /// Conditionally retrieves one or more rows from the UserLog table.&#xD;&#xA;  /// &lt;/summary&gt;&#xD;&#xA;  /// &lt;param name=&quot;tRequestID&quot;&gt;A tRequestID value.&lt;/param&gt;&#xD;&#xA;  /// &lt;returns&gt;A collection of UserLog objects.&lt;/returns&gt;  &#xD;&#xA;  public List&lt;UserLog&gt; Select(string tRequestID)&#xD;&#xA;  {&#xD;&#xA;   const string SQL_STATEMENT = &#xD;&#xA;    &quot;SELECT [UserLogID], [TRequestID], [RequestStatus], [SubmitDate] &quot; +&#xD;&#xA;    &quot;FROM dbo.UserLog &quot; +&#xD;&#xA;    &quot;WHERE [TRequestID]=@TRequestID &quot;;&#xD;&#xA;&#xD;&#xA;   List&lt;UserLog&gt; result = new List&lt;UserLog&gt;();&#xD;&#xA;&#xD;&#xA;   // Connect to database.&#xD;&#xA;   var db = new SqlDatabase(base.ConnectionString);&#xD;&#xA;   using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))&#xD;&#xA;   { &#xD;&#xA;    &#xD;&#xA;    db.AddInParameter(cmd, &quot;@TRequestID&quot;, DbType.String, tRequestID);&#xD;&#xA;    &#xD;&#xA;    using (IDataReader dr = db.ExecuteReader(cmd))&#xD;&#xA;    {&#xD;&#xA;     while (dr.Read())&#xD;&#xA;     {&#xD;&#xA;      // Create a new UserLog&#xD;&#xA;      UserLog userLog = new UserLog();&#xD;&#xA;&#xD;&#xA;      // Read values.&#xD;&#xA;      userLog.UserLogID = GetDataValue&lt;string&gt;(dr, &quot;UserLogID&quot;);&#xD;&#xA;      userLog.TRequestID = GetDataValue&lt;string&gt;(dr, &quot;TRequestID&quot;);&#xD;&#xA;      userLog.RequestStatus = GetDataValue&lt;string&gt;(dr, &quot;RequestStatus&quot;);&#xD;&#xA;      userLog.SubmitDate = GetDataValue&lt;DateTime&gt;(dr, &quot;SubmitDate&quot;);&#xD;&#xA;&#xD;&#xA;      // Add to List.&#xD;&#xA;      result.Add(userLog);&#xD;&#xA;     }&#xD;&#xA;    }&#xD;&#xA;   }&#xD;&#xA;&#xD;&#xA;   return result;&#xD;&#xA;  }&#xD;&#xA;">
    <NamespacesToImport />
    <Methods>
      <MethodModel Name="Select" EntityName="UserLog" TableName="UserLog" SchemaName="dbo" TableAlias="A" Type="Select" IsUpdated="false" XmlComment="Conditionally retrieves one or more rows from the UserLog table." GenerateXmlComments="true" UseDefaultComments="true" UseLoadMethod="false" GenerateLoadMethod="false">
        <RelatedTables />
        <Columns>
          <ColumnModel Name="UserLogID" TableName="UserLog" PropertyName="UserLogID" DataType="string" DbType="String" IsPrimaryKey="true" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="TRequestID" TableName="UserLog" PropertyName="TRequestID" DataType="string" DbType="String" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="RequestStatus" TableName="UserLog" PropertyName="RequestStatus" DataType="string" DbType="String" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="SubmitDate" TableName="UserLog" PropertyName="SubmitDate" DataType="DateTime" DbType="Date" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
        </Columns>
        <FilterColumns>
          <FilterColumnModel Name="TRequestID" TableName="UserLog" PropertyName="TRequestID" DataType="string" DbType="String" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" OpenParenthesis="false" ConditionalOperator="None" Operator="Equals" CloseParenthesis="false" IsOptional="false" />
        </FilterColumns>
        <OrderByColumns />
      </MethodModel>
    </Methods>
  </ClassModel>
  <ClassModel ClassName="UserDAC" IsUpdated="false" GenerateXmlComments="true" UseDefaultComments="true" XmlComment="User data access component. Manages CRUD operations for the User table." ProductName="TR.Data" Body="">
    <NamespacesToImport />
    <Methods />
  </ClassModel>
  <ClassModel ClassName="UsersDAC" IsUpdated="false" GenerateXmlComments="true" UseDefaultComments="true" XmlComment="User data access component. Manages CRUD operations for the User table." ProductName="TR.Data" Body="&#xD;&#xA;  /// &lt;summary&gt;&#xD;&#xA;  /// Returns a row from the Users table.&#xD;&#xA;  /// &lt;/summary&gt;&#xD;&#xA;  /// &lt;param name=&quot;userID&quot;&gt;A UserID value.&lt;/param&gt;&#xD;&#xA;  /// &lt;param name=&quot;userName&quot;&gt;A UserName value.&lt;/param&gt;&#xD;&#xA;  /// &lt;param name=&quot;password&quot;&gt;A Password value.&lt;/param&gt;&#xD;&#xA;  /// &lt;returns&gt;A Users object with data populated from the database.&lt;/returns&gt;&#xD;&#xA;  public Users SelectById(long userID, string userName, string password)&#xD;&#xA;  {&#xD;&#xA;   const string SQL_STATEMENT = &#xD;&#xA;    &quot;SELECT [UserID], [UserName], [Password] &quot; +&#xD;&#xA;    &quot;FROM ace.Users  &quot;  +&#xD;&#xA;    &quot;WHERE [UserID]=@UserID &quot; +&#xD;&#xA;       &quot;AND [UserName]=@UserName &quot; +&#xD;&#xA;       &quot;AND [Password]=@Password &quot;;&#xD;&#xA;&#xD;&#xA;   Users users = null;&#xD;&#xA;&#xD;&#xA;   // Connect to database.&#xD;&#xA;   var db = new SqlDatabase(base.ConnectionString);&#xD;&#xA;   using (DbCommand cmd = db.GetSqlStringCommand(SQL_STATEMENT))&#xD;&#xA;   {&#xD;&#xA;    db.AddInParameter(cmd, &quot;@UserID&quot;, DbType.Int64, userID);&#xD;&#xA;    db.AddInParameter(cmd, &quot;@UserName&quot;, DbType.AnsiString, userName);&#xD;&#xA;    db.AddInParameter(cmd, &quot;@Password&quot;, DbType.AnsiString, password);&#xD;&#xA;&#xD;&#xA;    using (IDataReader dr = db.ExecuteReader(cmd))&#xD;&#xA;    {&#xD;&#xA;     if (dr.Read())&#xD;&#xA;     {&#xD;&#xA;      // Create a new Users&#xD;&#xA;      users = new Users();&#xD;&#xA;&#xD;&#xA;      // Read values.&#xD;&#xA;      users.UserID = GetDataValue&lt;long&gt;(dr, &quot;UserID&quot;);&#xD;&#xA;      users.UserName = GetDataValue&lt;string&gt;(dr, &quot;UserName&quot;);&#xD;&#xA;      users.Password = GetDataValue&lt;string&gt;(dr, &quot;Password&quot;);&#xD;&#xA;     }&#xD;&#xA;    }&#xD;&#xA;   }&#xD;&#xA;&#xD;&#xA;   return users;&#xD;&#xA;  }&#xD;&#xA;">
    <NamespacesToImport />
    <Methods>
      <MethodModel Name="SelectById" EntityName="Users" TableName="Users" SchemaName="ace" TableAlias="A" Type="SelectObject" IsUpdated="false" XmlComment="Returns a row from the Users table." GenerateXmlComments="true" UseDefaultComments="true" UseLoadMethod="false" GenerateLoadMethod="false">
        <RelatedTables />
        <Columns>
          <ColumnModel Name="UserID" TableName="Users" PropertyName="UserID" DataType="long" DbType="Int64" IsPrimaryKey="true" IsIdentity="true" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="UserName" TableName="Users" PropertyName="UserName" DataType="string" DbType="AnsiString" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
          <ColumnModel Name="Password" TableName="Users" PropertyName="Password" DataType="string" DbType="AnsiString" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" />
        </Columns>
        <FilterColumns>
          <FilterColumnModel Name="UserID" TableName="Users" PropertyName="UserID" DataType="long" DbType="Int64" IsPrimaryKey="true" IsIdentity="true" IsNullable="false" IsOutput="false" OpenParenthesis="false" ConditionalOperator="None" Operator="Equals" CloseParenthesis="false" IsOptional="false" />
          <FilterColumnModel Name="UserName" TableName="Users" PropertyName="UserName" DataType="string" DbType="AnsiString" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" OpenParenthesis="false" ConditionalOperator="AND" Operator="Equals" CloseParenthesis="false" IsOptional="false" />
          <FilterColumnModel Name="Password" TableName="Users" PropertyName="Password" DataType="string" DbType="AnsiString" IsPrimaryKey="false" IsIdentity="false" IsNullable="false" IsOutput="false" OpenParenthesis="false" ConditionalOperator="AND" Operator="Equals" CloseParenthesis="false" IsOptional="false" />
        </FilterColumns>
        <OrderByColumns />
      </MethodModel>
    </Methods>
  </ClassModel>
</ArrayOfClassModel>