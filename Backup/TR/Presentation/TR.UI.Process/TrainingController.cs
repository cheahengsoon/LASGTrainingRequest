//====================================================================================================
// Base code generated with Impulse: UIPC Gen (Build 3.0.5701.25371)
// Layered Architecture Solution Guidance (http://layerguidance.codeplex.com)
//
// Generated by es.cheah at ENGSOON on 11/11/2016 09:57:35 
//====================================================================================================

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ServiceModel;
using TR.Entities;
using TR.Services.Contracts;

using TR.UI.Process.TrainingWorkflowService;
using MK.Framework.ACE.Entities;
using TR.UI.Process.TrainingServiceReference1;
using System.Net.PeerToPeer;

namespace TR.UI.Process
{
    // NOTE: Please ensure that you name the service reference as the service name
    //		 when you Add Service Reference.
    //		 Example: MyService and not MyServiceReference
    //
    //		 Depending on the svcutil.exe, your method parameters could be in 
    //		 different order from the code generated here. If that is the case, 
    //		 please rearrange the generated code.

    /// <summary>
    /// Training controller component.
    /// </summary>
    public partial class TrainingController
    {       /// <summary>
            /// Calls the LoginVerify operation method in the TrainingService.
            /// </summary>
            /// <param name="Username">A Username value.</param>
            /// <param name="Password">A Password value.</param>
            /// <returns>Returns a User object.</returns>
        public User LoginVerify(string Username, string Password)
        {
            User result = default(User);
            var proxy = new TrainingServiceClient();

            try
            {
                result = proxy.LoginVerify(Username, Password);
            }
            catch (FaultException fex)
            {
                // TODO: Handle your exception here or raise it to the UI.
                //		 Do not display sensitive information to the UI.
                throw new ApplicationException(fex.Message);
            }
            finally
            {
                proxy.Close();
            }
            return result;
        }

        /// <summary>
        /// Calls the ListTraining operation method in the TrainingService.
        /// </summary>
        /// <param name="currentPage">A currentPage value.</param>
        /// <returns>Returns a List<TrainingRequest> object.</returns>
        public List<TrainingRequest> ListTraining(int currentPage)
        {
            List<TrainingRequest> result = default(List<TrainingRequest>);
            var proxy = new TrainingServiceClient();

            try
            {
                result = proxy.ListTraining(currentPage);
            }
            catch (FaultException fex)
            {
                // TODO: Handle your exception here or raise it to the UI.
                //		 Do not display sensitive information to the UI.
                throw new ApplicationException(fex.Message);
            }
            finally
            {
                proxy.Close();
            }
            return result;
        }
        /// <summary>
        /// Calls the GetTraining operation method in the TrainingService.
        /// </summary>
        /// <param name="tRequestID">A tRequestID value.</param>
        /// <returns>Returns a TrainingRequest object.</returns>
        public TrainingRequest GetTraining(string tRequestID)
        {
            TrainingRequest result = default(TrainingRequest);
            var proxy = new TrainingServiceClient();

            try
            {
                result = proxy.GetTraining(tRequestID);
            }
            catch (FaultException fex)
            {
                // TODO: Handle your exception here or raise it to the UI.
                //		 Do not display sensitive information to the UI.
                throw new ApplicationException(fex.Message);
            }
            finally
            {
                proxy.Close();
            }
            return result;
        }
        /// <summary>
        /// Calls the Cancel operation method in the TrainingWorkflowService.
        /// </summary>
        /// <param name="trainingRequest">A trainingRequest value.</param>
        public void Cancel(TrainingRequest trainingRequest)
        {
            // TrainingRequest result = default(TrainingRequest);

            var proxy = new TrainingWorkflowServiceClient();


            try
            {
                proxy.Cancel(trainingRequest);
            }
            catch (FaultException fex)
            {
                // TODO: Handle your exception here or raise it to the UI.
                //		 Do not display sensitive information to the UI.
                throw new ApplicationException(fex.Message);
            }
            finally
            {
                proxy.Close();
            }

        }
        /// <summary>
        /// Calls the Approve operation method in the TrainingWorkflowService.
        /// </summary>
        /// <param name="trainingRequest">A trainingRequest value.</param>
        public void Approve(TrainingRequest trainingRequest)
        {
            var proxy = new TrainingWorkflowServiceClient();

            try
            {
                proxy.Approve(trainingRequest);
            }
            catch (FaultException fex)
            {
                // TODO: Handle your exception here or raise it to the UI.
                //		 Do not display sensitive information to the UI.
                throw new ApplicationException(fex.Message);
            }
            finally
            {
                proxy.Close();
            }
        }
        /// <summary>
        /// Calls the Apply operation method in the TrainingWorkflowService.
        /// </summary>
        /// <param name="trainingRequest">A trainingRequest value.</param>
        public void Apply(TrainingRequest trainingRequest)
        {
            var proxy = new TrainingWorkflowServiceClient();

            try
            {
                proxy.Apply(trainingRequest);
            }
            catch (FaultException fex)
            {
                // TODO: Handle your exception here or raise it to the UI.
                //		 Do not display sensitive information to the UI.
                throw new ApplicationException(fex.Message);
            }
            finally
            {
                proxy.Close();
            }
        }
        /// <summary>
        /// Calls the Reject operation method in the TrainingWorkflowService.
        /// </summary>
        /// <param name="trainingRequest">A trainingRequest value.</param>
        public void Reject(TrainingRequest trainingRequest)
        {

            var proxy = new TrainingWorkflowServiceClient();

            try
            {
                proxy.Reject(trainingRequest);
            }
            catch (FaultException fex)
            {
                // TODO: Handle your exception here or raise it to the UI.
                //		 Do not display sensitive information to the UI.
                throw new ApplicationException(fex.Message);
            }
            finally
            {
                proxy.Close();
            }
        }

        public void Export()
        {
            TrainingServiceClient tsc = new TrainingServiceClient();
            try
            {
                tsc.Export();

            }
            catch (FaultException fex)
            {
                throw new ApplicationException(fex.Message);
            }
            finally
            {
                tsc.Close();
            }
        }

        /// <summary>
        /// Calls the GetUserPermission operation method in the TrainingService.
        /// </summary>
        /// <param name="userID">A userID value.</param>
        /// <param name="policyId">A policyId value.</param>
        /// <returns>Returns a AccessPolicy object.</returns>
        public AccessPolicy GetUserPermission(long userID, string policyId)
        {
            AccessPolicy result = default(AccessPolicy);
            var proxy = new TrainingServiceClient();

            try
            {
                result = proxy.GetUserPermission(userID, policyId);
            }
            catch (FaultException fex)
            {
                // TODO: Handle your exception here or raise it to the UI.
                //		 Do not display sensitive information to the UI.
                throw new ApplicationException(fex.Message);
            }
            finally
            {
                proxy.Close();
            }
            return result;
        }
    }
}
